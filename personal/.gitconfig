# Git Configuration - Personal
# Personal Git settings with productivity-focused aliases

[user]
	email = dev@joe.sh
	name = Joe Schmitt

[alias]
  # Quick commit operations
  am = "!f() { git add .; git commit --amend; }; f"                    # Add all and amend
  c = "!f() { if [[ ! -z \"$1\" ]]; then git commit -m \\\"$1\\\"; else git commit; fi; }; f"  # Commit with optional message
  ca = "!f() { git add .; git c \\\"$1\\\"; }; f"                     # Add all and commit
  cam = "!f() { git add .; git commit --amend --no-edit; }; f"        # Add all and amend without editing

  # Branch management
  bl = branch --list                                                   # List branches
  bd = "!f() { git branch -D $1; }; f"                                # Delete branch
  br = "!f() { cur_branch=$(git rev-parse --verify refs/heads/$1 2> /dev/null); if [[ -z $cur_branch ]]; then git checkout -b $1 ${2:-origin/master} --no-track; else git checkout $1; fi }; f"  # Create new branch or switch to existing
  brd = "!f() { cur_branch=$(git rev-parse --abbrev-ref HEAD); git br $1 $2; git branch -d $cur_branch --force; }; f"  # Switch to new branch and delete old
  cl = "!f() { remote=${1:-origin}; git fetch $remote; git remote prune $remote; git branch -vv | grep $remote'/.*: gone]' | awk '{print $1}' | xargs git branch -df; git prune; }; f"  # Clean up deleted remote branches
  co = checkout                                                        # Checkout shorthand

  # Information and history
  d = diff HEAD .                                                      # Diff against HEAD
  lg = log --oneline --color --graph --decorate --all                 # Compact log with graph
  lgg = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative  # Detailed graph log
  root = rev-parse --show-toplevel                                     # Show repository root
  st = status                                                          # Status shorthand
  sb = status -sbu                                                     # Short status with upstream info
  sh = show --pretty=\"format:\" --name-only                          # Show changed files only

  # Remote operations
  plr = "!f() { git fetch; git pull --rebase ${1:-origin} ${2:-master}; }; f"  # Pull with rebase
  shv = push --force-with-lease                                        # Safe force push
	shove = push --force-with-lease                                      # Safe force push (alternative)

  # Reset operations
  rs = "!f() { git reset ${@:-HEAD~1}; }; f"                          # Reset to previous commit

# Git behavior configuration
[branch]
  autosetuprebase = always    # Always rebase when pulling

[core]
	editor = $EDITOR            # Use system default editor
  pager = delta

[color]
  ui = auto                   # Enable colored output

[interactive]
  diffFilter = delta --color-only

[merge]
  conflictStyle = zdiff3      # Show common ancestor in merge conflicts

# Git LFS (Large File Storage) configuration
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

# Default behaviors
[pull]
  rebase = true              # Always rebase when pulling

[push]
  default = current          # Push current branch to upstream

[rebase]
  autoStash = true           # Automatically stash changes during rebase

[init]
	defaultBranch = main       # Use 'main' as default branch name

[delta]
  navigate = true
  line-numbers = true
  side-by-side = false
  dark = true
  features = tokyonight

[delta "tokyonight"]
  syntax-theme = "Dracula"

  # Base backgrounds
  plus-style       = "syntax #1c2733"
  minus-style      = "syntax #3b1e25"

  # Intraline
  plus-emph-style  = "auto #264b5e bold"
  minus-emph-style = "auto #7a3345"

  # Line numbers
  line-numbers-plus-style  = "#4a949b"
  line-numbers-minus-style = "#914c54"
  line-numbers-zero-style  = "#2b3347"

  # Headers
  file-style                   = "bold #a9b1d6"
  hunk-header-style            = "bold syntax #1a2332"
  hunk-header-decoration-style = "box #3b4261"
  zero-style                   = "syntax"

# Git-spice configuration (stacked diffs workflow)
[spice "branchCheckout"]
	showUntracked = true       # Show untracked files when checking out

[spice "branchCreate"]
	commit = false             # Don't auto-commit when creating branches

[spice "submit"]
	navigationComment = multiple  # Allow multiple navigation comments
