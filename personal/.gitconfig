# Git Configuration - Personal
# Personal Git settings with productivity-focused aliases

[user]
	email = your-personal@email.com  # Replace with your personal email
	name = Joe Schmitt

[alias]
  # Quick commit operations
  am = "!f() { git add .; git commit --amend; }; f"                    # Add all and amend
  c = "!f() { if [[ ! -z \"$1\" ]]; then git commit -m \\\"$1\\\"; else git commit; fi; }; f"  # Commit with optional message
  ca = "!f() { git add .; git c \\\"$1\\\"; }; f"                     # Add all and commit
  cam = "!f() { git add .; git commit --amend --no-edit; }; f"        # Add all and amend without editing

  # Branch management
  bl = branch --list                                                   # List branches
  bd = "!f() { git branch -D $1; }; f"                                # Delete branch
  br = "!f() { cur_branch=$(git rev-parse --verify refs/heads/$1 2> /dev/null); if [[ -z $cur_branch ]]; then git checkout -b $1 ${2:-origin/master} --no-track; else git checkout $1; fi }; f"  # Create new branch or switch to existing
  brd = "!f() { cur_branch=$(git rev-parse --abbrev-ref HEAD); git br $1 $2; git branch -d $cur_branch --force; }; f"  # Switch to new branch and delete old
  cl = "!f() { remote=${1:-origin}; git fetch $remote; git remote prune $remote; git branch -vv | grep $remote'/.*: gone]' | awk '{print $1}' | xargs git branch -df; git prune; }; f"  # Clean up deleted remote branches
  co = checkout                                                        # Checkout shorthand

  # Information and history
  d = diff HEAD .                                                      # Diff against HEAD
  lg = log --oneline --color --graph --decorate --all                 # Compact log with graph
  lgg = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative  # Detailed graph log
  root = rev-parse --show-toplevel                                     # Show repository root
  st = status                                                          # Status shorthand
  sb = status -sbu                                                     # Short status with upstream info
  sh = show --pretty=\"format:\" --name-only                          # Show changed files only

  # Remote operations
  plr = "!f() { git fetch; git pull --rebase ${1:-origin} ${2:-master}; }; f"  # Pull with rebase
  shv = push --force-with-lease                                        # Safe force push
	shove = push --force-with-lease                                      # Safe force push (alternative)

  # Reset operations
  rs = "!f() { git reset ${@:-HEAD~1}; }; f"                          # Reset to previous commit

# Git behavior configuration
[branch]
  autosetuprebase = always    # Always rebase when pulling

[core]
	editor = $EDITOR            # Use system default editor

[color]
  ui = auto                   # Enable colored output

# Diff and merge tool configuration
[diff]
  tool = micro               # Use micro as default diff tool

[difftool "default-difftool"]
  cmd = micro --diff $LOCAL $REMOTE

[difftool "vscode"]
  cmd = "code-insiders --wait --diff  "

[difftool "micro"]
  cmd = micro --diff $LOCAL $REMOTE

[merge]
  tool = vscode              # Use VS Code for merge conflicts

[mergetool]
  keepBackup = true          # Keep backup files during merge

[mergetool "vscode"]
  cmd = "code-insiders --wait "

# Git LFS (Large File Storage) configuration
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

# Default behaviors
[pull]
  rebase = true              # Always rebase when pulling

[push]
  default = current          # Push current branch to upstream

[rebase]
  autoStash = true           # Automatically stash changes during rebase

[init]
	defaultBranch = main       # Use 'main' as default branch name

# Git-spice configuration (stacked diffs workflow)
[spice "branchCheckout"]
	showUntracked = true       # Show untracked files when checking out

[spice "branchCreate"]
	commit = false             # Don't auto-commit when creating branches

[spice "submit"]
	navigationComment = multiple  # Allow multiple navigation comments